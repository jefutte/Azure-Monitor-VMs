name: 'Deploy Monitoring'

on:
  workflow_dispatch:
    inputs:
      terraform_operation:
        description: "Terraform operation: plan, apply, destroy"
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_VAR_action_group_webhook: ${{ secrets.JIRA_WEBHOOK }}

    defaults:
      run:
        shell: bash

    steps:
    #Checkout repository
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.CLIENT_ID }}
        tenant-id: ${{ secrets.TENANT_ID }}
        subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
  
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ./terraform/vm-monitoring

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform/vm-monitoring

    # Verify configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state.
    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ./terraform/vm-monitoring

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -out=tfplan -var-file="vars.tfvars"
      working-directory: ./terraform/vm-monitoring

    # Output plan
    - name: Terraform Show
      id: show
      run: terraform show -json tfplan > tfplan.json
      working-directory: ./terraform/vm-monitoring

    # PR comment
    - name: Terraform PR Comment
      uses: liatrio/terraform-change-pr-commenter@v1.4.0
      with:
        json-file: ./tfplan.json
        expand-comment: 'true' 
      
    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false -var-file="vars.tfvars"
      working-directory: ./terraform/vm-monitoring